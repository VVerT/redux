{"version":3,"sources":["constants/constants.js","components/Counter/counter.js","containers/CounterContainer.js","actions/conter.js","components/Main/Main.js","containers/MainContainer.js","actions/main.js","components/App/App.js","reducers/counterReducer.js","reducers/mainReducer.js","reducers/index.js","index.js"],"names":["INCREMENT_COUNT","DECREMENT_COUNT","RESET_COUNT","SEND_COUNT","SEND_TEXT","Counter","props","console","log","className","count","onClick","increment","decrement","reset","send","saved","connect","state","counter","savedData","dispatch","type","data","payload","sendAction","Main","handleChange","bind","e","this","sendText","target","value","textData","onChange","React","Component","main","sendTextAction","App","MainContainer","initialState","counterReducer","action","error","mainReducer","combineReducers","middleware","thunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cd41784.chunk.js","sourcesContent":["export const INCREMENT_COUNT = \"INCREMENT_COUNT\";\nexport const DECREMENT_COUNT = \"DECREMENT_COUNT\";\nexport const RESET_COUNT = \"RESET_COUNT\";\nexport const SEND_COUNT = \"SEND_COUNT\";\n\nexport const SEND_TEXT = \"SEND_TEXT\";","import React from 'react';\n\nfunction Counter(props) {\n    console.log(props);\n    return (\n        <div className=\"App\">\n            <h1>{props.count}</h1>\n            <button onClick={props.increment}>Increment</button>\n            <button onClick={props.decrement}>Decrement</button>\n            <button onClick={props.reset}>RESET</button>\n            <button onClick={() => props.send(props.count)}>Saved</button>\n            <h1>{props.saved}</h1>\n        </div>\n    );\n}\n\nexport default Counter;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { incrementAction, decrementAction, resetAction, sendAction } from '../actions/conter';\nimport Counter from '../components/Counter/counter'\n\n\nconst CounterContainer = ({ count, increment, decrement, reset, send, saved }) => (\n    <Counter\n        count={count}\n        increment={increment}\n        decrement={decrement}\n        reset={reset}\n        send={send}\n        saved={saved}\n    />\n)\n\nconst mapStateToProps = (state) => ({\n    count: state.counter.count,\n    saved: state.counter.savedData\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        increment: () => dispatch(incrementAction()),\n        decrement: () => dispatch(decrementAction()),\n        reset: () => dispatch(resetAction()),\n        send: (data) => dispatch(sendAction(data)),\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CounterContainer)","import {\n    INCREMENT_COUNT,\n    DECREMENT_COUNT,\n    RESET_COUNT,\n    SEND_COUNT\n} from \"../constants/constants\";\n\nexport function incrementAction() {\n    return {type: INCREMENT_COUNT}\n}\n\nexport function decrementAction() {\n    return {type: DECREMENT_COUNT}\n}\n\nexport function sendAction(data) {\n    return {type: SEND_COUNT, payload: data}\n}\n\nexport function resetAction() {\n    return {type: RESET_COUNT}\n}\n\n","import React from 'react';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n    handleChange(e) {\n        this.props.sendText(e.target.value)\n            // Потрібно встановити пакет gh-pages в проект\n        // дописати два скрипти\n        //  \"predeploy\": \"npm run build\",\n        //     \"deploy\": \"gh-pages -d build\"\n        //\n        //\n        // \"homepage\": \"http://  Загальна назва твого репозиторіюв  мене: wert.github.io/Назва проекту\"\n        //  Проект має бути уже закомічений в гіт(хоча не знаю чи це впливає, але певно так було в туторіалі).\n        // Запускаєш npm run deploy i очікуєш на повідомлення Published.\n        // І він готовий на адресі  в \"homepage\"\n    }\n\n    render() {\n        console.log(this.props);\n        return (\n            <div className=\"App\">\n                <h1>{this.props.count}</h1>\n                <h1>{this.props.textData}</h1>\n                <input\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    value={this.props.textData}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { sendTextAction } from '../actions/main';\nimport Main from \"../components/Main/Main\";\n\n\nconst mapStateToProps = (state) => ({\n    count: state.counter.count,\n    textData: state.main.textData\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        sendText: (data) => dispatch(sendTextAction(data)),\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main)","import {\n    SEND_TEXT\n} from \"../constants/constants\";\n\nexport function sendTextAction(data) {\n    return {type: SEND_TEXT, payload: data}\n}","import React from 'react';\nimport './App.css';\nimport CounterContainer from \"../../containers/CounterContainer\";\nimport MainContainer from \"../../containers/MainContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CounterContainer />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import {\n    INCREMENT_COUNT,\n    DECREMENT_COUNT,\n    RESET_COUNT,\n    SEND_COUNT\n} from \"../constants/constants\";\n\nconst initialState = {\n    count: 0,\n    savedData: 0\n}\n\nconst counterReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case INCREMENT_COUNT:\n            return {\n                ...state,\n                count: state.count + 1\n            }\n        case DECREMENT_COUNT:\n            return {\n                ...state,\n                count: state.count - 1\n            }\n        case SEND_COUNT:\n            return {\n                ...state,\n                savedData: action.payload\n            }\n        case RESET_COUNT:\n            return {\n                ...initialState\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;","import {\n    SEND_TEXT\n} from \"../constants/constants\";\n\nconst initialState = {\n    textData: \"\",\n    error: null\n}\n\nconst mainReducer = (state= initialState, action) => {\n    switch (action.type) {\n        case SEND_TEXT:\n            return {\n                ...state,\n                textData: action.payload\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default mainReducer;","import { combineReducers } from 'redux';\nimport counterReducer from \"./counterReducer\";\nimport mainReducer from \"./mainReducer\"\n\nexport default combineReducers({\n    counter: counterReducer,\n    main: mainReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\n\nconst middleware = [ thunk ];\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(...middleware)\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}